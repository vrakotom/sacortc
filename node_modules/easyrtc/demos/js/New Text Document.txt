ko.bindingHandlers.stopBinding = {
    init: function() {
        return { controlsDescendantBindings: true };
    }
};

ko.virtualElements.allowedBindings.stopBinding = true;

function SACORTCViewModel(){
 var self = this;
 //observable array to hold json data
 self.userRecords = ko.observable([]);

 self.videoSourceList = ko.observable([]);

  //other observables
  self.welcome_message = ko.observable('Welcome to SACO RTC...');

  self.user_name = ko.observable('').extend({required: true, minLength: 1});

  self.user_password = ko.observable('').extend({required: true, minLength: 1});

  self.current_camera = ko.observable('');

  self.errorsNewConnection = ko.validation.group([self.user_name, self.user_password]);


 self.allValid = ko.computed(function() {
 if (self.errorsNewConnection().length === 0){
 return true;
 }else{
 return false;
 }
 });

self.DisplaySwitchCamera = function(cameraId){
if(self.current_camera() != cameraId){  
return true;
}else{
return false;
}
}

self.SwitchCamera = function(cameraId){
  if(cameraId != '' && cameraId != undefined){
    alert('switching camera...' + cameraId);
    self.current_camera(cameraId);
  }
}

     //Function to reset view models. make sure to disable display of validation messages.
     //for new records
 function ResetViewModelNewConnection(){
    self.user_name('');
    self.user_password('');
    self.errorsNewRecord.showAllMessages(false);
}
     //for editting records
 function ResetViewModelEditRecord(){
    self.edit_session_name('');
    self.selected_edit_id(undefined);
    self.errorsNewConnection.showAllMessages(false);
}


 //Retrieve all
 function Authenticate(user_name, user_password){
  if(user_name === 'admin' && user_password === 'saco'){
    //return true
    self.userRecords({name: "John Doe", location: "16th Ar."});
    return true;
  }else{
    //return false
    return false;
  }     
 }

self.Connect = function(user_name, user_password){
  /*
    if (self.errorsNewRecord().length === 0){
        jsRoutes.controllers.Sessions.add(self.session_name()).ajax({
            success: function(data){
                ResetViewModelNewRecord();
                GetAllRecords();
            },
            error: function(xhr, status, error) {
                //alert('error adding new record');
            }
        });
    }else{
        self.errorsNewRecord.showAllMessages();
        }*/
}

//function to initialize connection...
function Connect() {
    console.log("Initializing.");
    easyrtc.setRoomOccupantListener(ConvertListToButtons);
    easyrtc.connect("easyrtc.multistream", loginSuccess, loginFailure);
    easyrtc.setAutoInitUserMedia(false);
    easyrtc.getVideoSourceList(function(videoSrcList) {
      self.videoSourceList(videoSrcList);

        /*for (var i = 0; i < videoSrcList.length; i++) {
             var videoEle = videoSrcList[i];
            var videoLabel = (videoSrcList[i].label &&videoSrcList[i].label.length > 0)?
      (videoSrcList[i].label):("src_" + i);
            addSrcButton(videoLabel, videoSrcList[i].id);
        }*/       
    });
}

function ConvertListToButtons(roomName, occupants, isPrimary) {
    /*clearConnectList();
    var otherClientDiv = document.getElementById('otherClients');
    for (var easyrtcid in occupants) {
        var button = document.createElement('button');
        button.onclick = function(easyrtcid) {
            return function() {
                performCall(easyrtcid);
            };
        }(easyrtcid);

        var label = document.createTextNode("Call " + easyrtc.idToName(easyrtcid));
        button.appendChild(label);
        otherClientDiv.appendChild(button);
    }*/
}


function loginSuccess(easyrtcid) {
  alert('login successful');
    //disable("connectButton");
    //  enable("disconnectButton");
    //enable('otherClients');
    //selfEasyrtcid = easyrtcid;
    //document.getElementById("iam").innerHTML = "I am " + easyrtc.cleanId(easyrtcid);
}


function loginFailure(errorCode, message) {
    easyrtc.showError(errorCode, message);
}

Connect();



};
//end of view model

ko.applyBindings(new SACORTCViewModel(), document.getElementById("sacortccontainer"));