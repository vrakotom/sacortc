ko.bindingHandlers.stopBinding = {
    init: function() {
        return { controlsDescendantBindings: true };
    }
};


ko.virtualElements.allowedBindings.stopBinding = true;

function SACORTCViewModel(){
  var self = this;
 //observable array to hold json data
 self.userRecords = ko.observableArray([]);

 self.videoSourceList = ko.observableArray([]);

 //self.otherClients = ko.observable([]);

  self.otherClients = ko.observableArray([]);
  
  //other observables
  self.welcome_message = ko.observable('Bienvenue sur SACO WebRTC');

  self.user_name = ko.observable('Default User');

  self.logged_in_user = ko.observable('');

  self.user_password = ko.observable('');

  self.client_type = ko.observable('demo'); 

  self.current_camera = ko.observable('');

  self.chat_room = ko.observable('default');

  self.allow_dial = ko.observable(true);

  self.enable_hungup_button = ko.observable(false);

  self.self_easyrtc_id = ko.observable('');

  self.self_display_text = ko.observable('Non connecté');

  //variables for available location available_locations
  self.available_locations = ko.observableArray([]);  

  self.has_self_video = ko.observable(false);

  self.other_easyrtc_id = ko.observable('');

  self.accept_call_text = ko.observable('');

  self.reject_call_text = ko.observable('');

  self.enable_call_buttons = ko.observable(false);

  self.call_dialing = ko.observable(false);

  self.call_incoming = ko.observable(false);

  self.call_interrupting = ko.observable(false);

  self.call_rejecting = ko.observable(false);  

  self.is_connected = ko.observable(false);


    //subscribe to is_connected observabel and play sounds every time connection / disconnection 
    //from rtc server happens    
    self.is_connected.subscribe(function(status) {
    if(status === true)
    {
      var audio = new Audio('/demos/sounds/connected1.wav');
      audio.play();
    }else{
      var audio = new Audio('/demos/sounds/disconnected1.wav');
      audio.play();
        }
    });

    var audio_new_call_in = new Audio('/demos/sounds/ringing-tone1.mp3');
    audio_new_call_in.loop = true;
    //subscribe to call_incoming observable and play sounds every time a call comes in 
    self.call_incoming.subscribe(function(status) {
    if(status === true)
    {
      audio_new_call_in.play();  
    }else{
      //alert('stopping...');
      audio_new_call_in.pause();
      //if a change of status to false occurs, it means a call either cancelled by 
      //caller OR call has bee received... For now, do nothing. In future, you can get
      //creative with this part...
        }
    });

    var audio_new_call_out = new Audio('/demos/sounds/dial-tone1.mp3');
    audio_new_call_out.loop = true;
    //subscribe to call_dialing observable and play sounds every time a call comes in 
    self.call_dialing.subscribe(function(status) {
    if(status === true)
    {
      audio_new_call_out.play();  
    }else{
      //alert('stopping...');
      audio_new_call_out.pause();
      //if a change of status to false occurs, it means a call either cancelled by 
      //receiver OR call has been received... For now, do nothing. In future, you can get
      //creative with this part...
        }
    });

    var audio_new_call_interrupt = new Audio('/demos/sounds/call-interrupt1.wav');
    audio_new_call_interrupt.loop = true;
    //subscribe to call_interrupting observable and play sounds every time a call
    //comes in and there is an ongoing call
    self.call_interrupting.subscribe(function(status) {
    if(status === true)
    {
      audio_new_call_interrupt.play();  
    }else{
      alert('stopping...');
      audio_new_call_interrupt.pause();
      //if a change of status to false occurs, it means a call either cancelled by 
      //receiver OR call has been received... For now, do nothing. In future, you can get
      //creative with this part...
        }
    });

    //subscribe to call_rejecting observabel and play sounds every time call is rejected by callee 
    self.call_rejecting.subscribe(function(status) {
    if(status === true)
    {
      //play rejected tone only once (no loop)
      var audio = new Audio('/demos/sounds/call-rejected1.mp3');
      audio.play();
      //now reset flag to false
      self.call_rejecting(false);
      self.call_rejecting.valueHasMutated();  
    }else{
      //do nothing for now...

        }
    });


  self.errorsNewConnection = ko.validation.group([self.user_name, self.user_password]);

  self.self_easyrtc_id.subscribe(function(userid) {
    if(userid != undefined && userid != '')
    {
      self.self_display_text(easyrtc.idToName(userid));       
    }else{
      self.self_display_text('Non connecté');     

        }
});


 self.allValid = ko.computed(function() {
 if (self.errorsNewConnection().length === 0){
 return true;
 }else{
 return false;
 }
 });

//function to display / hide swicth button
self.displaySwitchCamera = function(cameraId){
if(self.current_camera() != cameraId && self.is_connected() === true){  
return true;
}else{
return false;
}
}

//function to actually switch camera
self.switchCamera = function(cameraId){
  if(cameraId != '' && cameraId != undefined){
    //easyrtc.enableAudio(false);
    switchLocalSource(cameraId, "true");
  }
}

     //Function to reset view models. make sure to disable display of validation messages.
     //for new records
 function resetViewModelNewConnection(){
    self.user_name('');
    self.user_password('');
    self.errorsNewRecord.showAllMessages(false);
}
     

 //Retrieve all
 /*function authenticate(user_name, user_password){
  if(user_name === 'admin' && user_password === 'saco'){
    //return true
    self.userRecords({name: "John Doe", location: "16th Ar."});
    return true;
  }else{
    //return false
    return false;
  }     
 }*/

 self.connectWebRTC = function(targetEasyrtcId) {
  if( !easyrtc.webSocket ) {
                    alert("No connection " + easyrtc.webSocket);    
                    retrieveLoggedInUserDemo();
            }
            else {
                    alert("Existing connection " + easyrtc.webSocket);    

                    easyrtc.webSocket.connect();                   
      }
 }

 self.connectWebRTCx = function(targetEasyrtcId) {
   if( !easyrtc.webSocket ) {
                    alert('socket NO existo' + easyrtc.webSocket);
            }
            else {
                    alert('socket existo!' + easyrtc.webSocket);
                    easyrtc.useThisSocketConnection(easyrtc.webSocket.socket);
                    //easyrtc.connect();

                   
      }
 }


 self.disconnectWebRTC = function(targetEasyrtcId) {
  //disconnect from rtc server
  easyrtc.disconnect();
  //get local video element selectedLocalStream and clear it of the video stream                  
  var selfVideo = document.getElementById("selectedLocalStream"); 
  easyrtc.clearMediaStream(selfVideo);
  //next close the current local media stream...
  easyrtc.closeLocalMediaStream(self.current_camera());
  //once disconnected from server, set is_connected flag to false
  self.is_connected(false);  
  self.self_easyrtc_id.valueHasMutated();
 }

 function retrieveLocations() {
  self.available_locations([{locationName: "Paris"}, {locationName: "Versailles"}, {locationName: "Neuilly Sur Seine"}]);
 }

 function retrieveLoggedInUserDemo() {
  //retrieve logged in user details  
  self.logged_in_user('dd5bec74fd2b6b2aa70a261821764b9b');
  self.logged_in_user.valueHasMutated(); 

  self.user_password('011206a32f105a578960739a06386cc4');  
  self.user_password.valueHasMutated(); 
  //retrieve available locations 
  retrieveLocations();
  connect();
}

function retrieveLoggedInUserAndroid() {
  //retrieve logged in user details  
  //NativeInterface.sayHello()
  ///not implemented yet...
  //self.logged_in_user('dd5bec74fd2b6b2aa70a261821764b9b');
  //self.logged_in_user.valueHasMutated(); 

  //self.user_password('011206a32f105a578960739a06386cc4');  
  //self.user_password.valueHasMutated(); 
  //retrieve available locations 
  self.client_type('android');
  self.client_type.valueHasMutated(); 

  retrieveLocations();
  connect();
}

function retrieveLoggedInUserWebInterface() {
  //retrieve logged in user details  
  var url = '/saco/webservices/getWebRTCUser';
  
  return $.getJSON(url, function(data) { 
    if(data){
      var username = '';
      var id = '';
      if(data.username){ username = data.username}
      if(data.id){ id = data.id}
      self.logged_in_user(username);
      self.logged_in_user.valueHasMutated(); 
      self.user_password(id);  
      self.user_password.valueHasMutated(); 

      self.client_type('pc');
      self.client_type.valueHasMutated(); 
      }
    });
  
  //retrieve available locations 
  retrieveLocations();
  connect();
}

function retrieveUserDetails() {
  /* Loading JSON objects using JSONP */
  var url = 'http://ecesaco.org/saco/webservices/checklogin/'+ self.logged_in_user() +'/'+ self.user_password();
  
  return $.getJSON(url, function(data) { 
    //self.logged_in_user_details(JSON.parse(JSON.stringify(data)));
    if(data){
      var firstname = '';
      var lastname = '';
      var location = '';
      if(data.User.firstname){ firstname = data.User.firstname}
      if(data.User.lastname){ lastname = data.User.lastname}
      if(data.User.location){ location = data.User.location}
      self.user_name(lastname + " " + firstname + " - " + location);
      self.user_name.valueHasMutated(); 
      }

    console.log(self.user_name());
})
  
}

//function to initialize connection...
function connect() {
    console.log("Initializing.");
    easyrtc.setRoomOccupantListener(convertListToButtons);
    //easyrtc.setSocketUrl("http://sacortc.cleverapps.io");
    easyrtc.setSocketUrl("http://192.168.43.63:8080");
    //easyrtc.setSocketUrl("http://localhost:8080");
    //easyrtc.setSocketUrl("http://192.168.0.19:8080");

    easyrtc.setCredential({ "username": self.logged_in_user(), "password":self.user_password(), "authtype":self.client_type()});

    //if authenticated then retrieve user info from DB
    retrieveUserDetails().done(function () {
    console.log('Done retrieving user details...');

    console.log('..............' + self.user_name());
    //set the default name for user
    easyrtc.setUsername(self.user_name());
    
    easyrtc.connect(self.chat_room(), loginSuccess, loginFailure);
    easyrtc.setAutoInitUserMedia(false);
                  console.log("..xxx.");
    easyrtc.getVideoSourceList(function(videoSrcList) {
                  console.log("...");

      self.videoSourceList(videoSrcList);

                  console.log("stream detected...");

      if(self.videoSourceList().length > 0){
        //set default camera 
        self.current_camera(self.videoSourceList()[0].id);
        switchLocalSource(self.videoSourceList()[0].id, "false");
       
        console.log(JSON.stringify(self.videoSourceList()));
        console.log('At least one camera found! Setting first camera on list as default...');
      }
             
    });
    
      }).fail(function () {
        console.log('Error initializing rtc connection!');
    });

}

function switchLocalSource(videoId, isSwicthing){
  //easyrtc.closeLocalMediaStream(self.current_camera());
  //stop current stream if switching cameras but if initializing, don't stop...
  if(isSwicthing === "true"){
    console.log("stopping previous stream first..." + self.current_camera());
    easyrtc.closeLocalMediaStream(self.current_camera());
    console.log('Switching camera. New default camera is one with ID:' + videoId);
    self.current_camera(videoId);
    console.log("Now, current camera is..." + self.current_camera());
  }

  easyrtc.setVideoSource(videoId);
        easyrtc.initMediaSource(
                function(stream) {                  
                  //get local video element selectedLocalStream                  
                  var selfVideo = document.getElementById("selectedLocalStream"); 
                  selfVideo.muted = true;
                  easyrtc.clearMediaStream(selfVideo);

                  easyrtc.setVideoObjectSrc(selfVideo, easyrtc.getLocalStream(videoId));
                  console.log("Initializing media source..." + videoId);

                  //if there is an ongoing call i.e. connection... then add the stream to the connection...
                  if( self.other_easyrtc_id() != '' && self.other_easyrtc_id() != undefined) {
                    console.log('adding stream on ongoing call..');
                        easyrtc.addStreamToCall(self.other_easyrtc_id(), videoId, function(easyrtcid, streamName){
                          console.log('stream added to the ongoing call...');   
                          //easyrtc.showError("Informational", "other party " + easyrtcid + " acknowledges receiving " + streamName);
                        });
                    }
                },
                function(errCode, errText) {
                  alert('Error in switching camera...' +errText);
                    easyrtc.showError(errCode, errText);
                }, videoId);

}


function convertListToButtons(roomName, occupants, isPrimary) {
  //load list of occupants to observable array...
  //but first empty it to avoid double entry of occupants...
  if(self.videoSourceList().length > 0){
  self.otherClients.removeAll();
  self.otherClients.valueHasMutated(); 
}
  //var occupantsData = JSON.parse(occupants);

  for (var easyrtcid in occupants) {
    self.otherClients().push({ "id": easyrtcid, "name":easyrtc.idToName(easyrtcid)});  
  }      
  self.otherClients.valueHasMutated();    

  console.log(JSON.stringify(self.otherClients()));  
  
}


self.performCall = function(targetEasyrtcId) {
  //let's get the dial tone going...
  self.call_dialing(true);
  self.call_dialing.valueHasMutated();
    var acceptedCB = function(accepted, easyrtcid) {
        if (!accepted) {
            easyrtc.showError("CALL-REJECTED", "Désolé votre appel a été refusé.");
            //enable('otherClients');
            self.allow_dial(true);
            self.allow_dial.valueHasMutated();   
            self.enable_hungup_button(false);
            self.enable_hungup_button.valueHasMutated();

            self.call_dialing(false);
            self.call_dialing.valueHasMutated();

            self.call_rejecting(true);
            self.call_rejecting.valueHasMutated();           

        }
        else {
            self.other_easyrtc_id(targetEasyrtcId);
            self.other_easyrtc_id.valueHasMutated();
            self.enable_hungup_button(true);
            self.enable_hungup_button.valueHasMutated();
            self.call_dialing(false);
            self.call_dialing.valueHasMutated();
            //otherEasyrtcid = targetEasyrtcId;
        }
    };

    var successCB = function() {
        //update endcall text
        //enable('hangupButton');
        self.enable_hungup_button(true);
        self.enable_hungup_button.valueHasMutated();   
        self.call_dialing(false);
        self.call_dialing.valueHasMutated();  

    };
    var failureCB = function() {
        self.allow_dial(true);
        self.allow_dial.valueHasMutated(); 
        self.enable_hungup_button(false);
        self.enable_hungup_button.valueHasMutated();
        self.call_dialing(false);
        self.call_dialing.valueHasMutated();
        //enable('otherClients');
    };
    var keys = easyrtc.getLocalMediaIds();

    easyrtc.call(targetEasyrtcId, successCB, failureCB, acceptedCB, keys);

    
    //enable('hangupButton');
    self.enable_hungup_button(true);
    self.enable_hungup_button.valueHasMutated();
    console.log("Perfoming call now................." + targetEasyrtcId);
}


function loginSuccess(easyrtcid) {  
  //set is_connected flag to true only if connection is succesful
  self.is_connected(true);
  self.self_easyrtc_id.valueHasMutated();

  console.log("Yaaaay, we are connected...");
  self.self_easyrtc_id(easyrtcid);
  self.self_easyrtc_id.valueHasMutated();
  console.log('Login successful');
}


function loginFailure(errorCode, message) {
    //if error occurs, set is_connected flag to false, just in case...
    self.is_connected(false);
    self.self_easyrtc_id.valueHasMutated();

    easyrtc.showError(errorCode, message);
}

self.hangup = function() {
    easyrtc.hangupAll();
    self.enable_hungup_button(false);
    self.enable_hungup_button.valueHasMutated();
    //also if you hangup before call is received...
    self.call_dialing(false);
    self.call_dialing.valueHasMutated();

    //disable('hangupButton');
}

//more easyrtc calls...
//set action to be taken when incoming call comes in...
easyrtc.setStreamAcceptor(function(easyrtcid, stream, streamName) {
    var remoteVideo = document.getElementById("incomingStream"); 
    //set the remote stream to appear on the selected video tag
    easyrtc.setVideoObjectSrc(remoteVideo, stream);  
    console.log("accepted incoming stream with name " + stream.streamName);
    console.log("checking incoming " + easyrtc.getNameOfRemoteStream(easyrtcid, stream));                           
    self.enable_hungup_button(true);
    self.enable_hungup_button.valueHasMutated();
});

//set what happens if remote remote is closed or ends...
easyrtc.setOnStreamClosed(function(easyrtcid, stream, streamName) {
  self.enable_hungup_button(false);
  self.enable_hungup_button.valueHasMutated();
  self.enable_call_buttons(false);
  self.enable_call_buttons.valueHasMutated(); 
  //we expect this flag to always be false at this point but this takes care of situations
  //when remote stream stops (not cancelled)
  self.call_incoming(false);
  self.call_incoming.valueHasMutated(); 
});


var callerPending = null;

//set what happens if remote call is cancelled by user...
easyrtc.setCallCancelled(function(easyrtcid) {
    self.enable_call_buttons(false);
    self.enable_call_buttons.valueHasMutated(); 
    self.call_incoming(false);
    self.call_incoming.valueHasMutated(); 



    /*
    if (easyrtcid === callerPending) {
        document.getElementById('acceptCallBox').style.display = "none";
        callerPending = false;
    }*/
});

//check if placed call has been accepted...
easyrtc.setAcceptChecker(function(easyrtcid, callback) {
  
  //show call buttons...
  self.enable_call_buttons(true);
  self.enable_call_buttons.valueHasMutated(); 
  //if there is an ongoing call...
  if( easyrtc.getConnectionCount() > 0 ) {
    //set incoming call interrupt flag...only if there are other ongoing calls
    self.call_interrupting(true);
    self.call_interrupting.valueHasMutated(); 
    //update incoming call text...
    self.accept_call_text("Arrêter l'appel et prendre l'appel de " + easyrtc.idToName(easyrtcid));
    self.accept_call_text.valueHasMutated(); 
    //update incoming call text...
    self.reject_call_text("Rejeter l'appel");
    self.reject_call_text.valueHasMutated(); 
    }
    else {
      //set incoming call flag...only if there are no other ongoing calls
    self.call_incoming(true);
    self.reject_call_text.valueHasMutated(); 

    self.accept_call_text("Accepter l'appel de " + easyrtc.idToName(easyrtcid));
    self.accept_call_text.valueHasMutated(); 
    //update incoming call text...
    self.reject_call_text("Rejeter l'appel");
    self.reject_call_text.valueHasMutated(); 
  }

  console.log('initialing accept call...');

  var acceptTheCall = function(wasAccepted) {   
                if(wasAccepted){

                if( easyrtc.getConnectionCount() > 0 ) {
                  //only interrupt flag
                  self.call_interrupting(false);
                  self.call_interrupting.valueHasMutated(); 
                  }
                  else {
                  //once call is accepted, disable incoming call flag
                  self.call_incoming(false);
                  self.reject_call_text.valueHasMutated();  
                } 

                console.log('You have accepted the incoming call...');  
                //hide call buttons...
                self.enable_call_buttons(false);
                self.enable_call_buttons.valueHasMutated();

                self.enable_hungup_button(true);
                self.enable_hungup_button.valueHasMutated();    

                }else{
                  if( easyrtc.getConnectionCount() > 0 ) {
                  //only interrupt flag
                  self.call_interrupting(false);
                  self.call_interrupting.valueHasMutated(); 
                  }
                  else {
                  //once call is accepted, disable incoming call flag
                  self.call_incoming(false);
                  self.reject_call_text.valueHasMutated();  

                  self.enable_hungup_button(false);
                  self.enable_hungup_button.valueHasMutated();  
                }
                  
                console.log('You have rejected the incoming call...');   
                  //hide call buttons...
                self.enable_call_buttons(false);                 
                self.enable_call_buttons.valueHasMutated(); 
  
                }

               if( wasAccepted && easyrtc.getConnectionCount() > 0 ) {
                //if call is accepted and there are ongoing calls just hang up all...
                    easyrtc.hangupAll();
               }

               if(self.current_camera()  != '' && self.current_camera != undefined && wasAccepted){                
               callback(wasAccepted, self.current_camera());
               }else{                
               callback(wasAccepted);
               }
            }
            document.getElementById("callAcceptButton").onclick = function() { acceptTheCall(true);};
            document.getElementById("callRejectButton").onclick =function() { acceptTheCall(false);};

            //update currect 'other rtc id'   
                self.other_easyrtc_id(easyrtcid);        
                self.other_easyrtc_id.valueHasMutated();   

    
});


};
//end of view model

ko.applyBindings(new SACORTCViewModel(), document.getElementById("sacortccontainer"));